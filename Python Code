import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import FormatStrFormatter
import seaborn as sns
from scipy import stats
import statsmodels.api as sm
import statsmodels.formula.api as smf
# Define the mathematical function invlogit
def invlogit(x):
return np.exp(x)/(1+np.exp(x))
# Define the mathematical function logit
def logit(x):
return np.log(x/(1-x))
def sim_logit_driving():
n = 100000
# Parameters for K
age = np.random.binomial(1, .3, n) # >65yo
sex = np.random.binomial(1, .52, n) # female
area = np.random.binomial(1, .6, n) # urban
# Baseline b0 characteristics
a0 = logit(.3) # low driving mileage
c0 = logit(0.17) # Polypharmacy
b0 = logit(.002) # RTC
# Parameters for the ZK relationship
a1 = np.log(0.8)
a2 = np.log(1.8)
a3 = np.log(1.2)
# Parameters for the XKZ relationship
c1 = np.log(2)
c2 = np.log(0.9)
c3 = np.log(1.2)
c4 = np.log(1.5)
# Parameters for the YXZK relationship
b1 = np.random.normal(np.log(1.35), (np.log(1.56)-
np.log(1.17))/(2*1.96), 1)
b2 = np.log(3)
b3 = np.log(0.6)
b4 = np.log(0.3)
b5 = np.log(0.9)
z = np.random.binomial(1, invlogit(a0 + a1*age + a2*sex +
a3*area), n)
x = np.random.binomial(1, invlogit(c0 + c1*age + c2*sex +
c3*area + c4*z), n)
y = np.random.binomial(1, invlogit(b0 + b1*x + b2*z + b3*age +
b4*sex + b5*area), n)
df = pd.DataFrame(data = np.column_stack((y, x, z,age, sex,
area) ))
# DGM under an effect of X
model1 = smf.logit('y~x+z+age+sex+area', data=df).fit()
se = np.sqrt(np.diag(model1.cov_params()))
b1_1 = model1.params[1]
se_b1_1 = se[1]
# print(model1.summary())
# DGM under no effect of X
b1 = 0
y = np.random.binomial(1, invlogit(b0 + b1*x + b2*z + b3*age +
b4*sex + b5*area), n)
model0 = smf.logit('y~x+z+age+sex+area', data=df).fit()
b1_0 = model0.params[1]
se = np.sqrt(np.diag(model0.cov_params()))
b1_0 = model0.params[1]
se_b1_0 = se[1]
# print(model0.summary())
b = (b1_1, se_b1_1, b1_0, se_b1_0)
return(b)
nsim = 1000
b = []
for i in range(nsim):
b = np.append(b, np.array(sim_logit_driving()), axis=0)
sim_results = np.reshape(b, (nsim, 4))
# Extract point estimates and std errors
b1 = sim_results[:,0]
se_b1 = sim_results[:,1]
or1 = np.exp(sim_results[:,0])
or0 = np.exp(sim_results[:,2])
fig, ax = plt.subplots(figsize=(5, 3))
ax.set(xscale="log")
ax.hist(or0, color='red', alpha=.2, density=True, bins=30, rwidth=.9)
ax.set_xticks((0.6, 0.8, 1.0, 1.3, 1.6, 2))
ax.xaxis.set_major_formatter(FormatStrFormatter('%3.2f'))
plt.axvline(np.exp(np.mean(np.log(or0))), color='green', alpha=.5,
linestyle='dashed', linewidth=3)
plt.hist(or1, color='blue', alpha=.2, density=True, bins=30, rwidth=.9)
plt.axvline(np.exp(np.mean(np.log(or1))), color='green', alpha=.5,
linestyle='dashed', linewidth=3)
plt.rcParams['axes.spines.right'] = False
plt.rcParams['axes.spines.top'] = False
plt.ylabel("Sampling distribution")
plt.xlabel(r"$\hat \beta_1$")
plt.show()
# average adjusted odds ratio under OR_XY|Z=1.35
np.exp(np.mean(np.log(or1)))
# average adjusted odds ratio under OR_XY|Z=0
np.exp(np.mean(np.log(or0)))
# Simulated statistical
z = (b1-0)/se_b1
p = stats.norm.cdf(-abs(z))*2
power = np.sum(p<.05)/nsim
print("Simulated power (%) = " , power*100)
